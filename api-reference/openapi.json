{
  "openapi": "3.0.1",
  "info": {
    "title": "Charp.ai API",
    "description": "API ecosystem for vendor management, authentication, campaign management, and tools for enhancing campaign execution",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    { "url": "https://api.charp.ai"}
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/vendors/{vendor_id}": {
      "get": {
        "description": "Fetch vendor details using the unique vendor ID",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "description": "Unique identifier of the vendor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Update vendor details using the unique vendor ID",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "description": "Unique identifier of the vendor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Vendor details to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Vendor details updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update vendor plan, limits, and credits",
        "parameters": [
          {
            "name": "vendor_id",
            "in": "path",
            "description": "Unique identifier of the vendor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Vendor plan details to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorPlanUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Vendor plan details updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/vendors": {
      "post": {
        "description": "Create a new vendor (internal use)",
        "requestBody": {
          "description": "Vendor details to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewVendor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Vendor created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/token": {
      "post": {
        "description": "Get access token using client credentials",
        "security": [],
        "requestBody": {
          "description": "Client credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Access token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "description": "Refresh access token",
        "security": [],
        "requestBody": {
          "description": "Refresh token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Access token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/brands": {
      "post": {
        "description": "Create a new brand",
        "requestBody": {
          "description": "Brand details to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBrand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Brand created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brand_id}": {
      "get": {
        "description": "Get brand details",
        "parameters": [
          {
            "name": "brand_id",
            "in": "path",
            "description": "Unique identifier of the brand",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Update brand info",
        "parameters": [
          {
            "name": "brand_id",
            "in": "path",
            "description": "Unique identifier of the brand",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Brand details to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Brand details updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a brand",
        "parameters": [
          {
            "name": "brand_id",
            "in": "path",
            "description": "Unique identifier of the brand",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Brand deleted successfully"
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns": {
      "post": {
        "description": "Create a campaign",
        "requestBody": {
          "description": "Campaign details to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCampaign"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Campaign created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}": {
      "get": {
        "description": "Get campaign details",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Unique identifier of the campaign",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/ingest": {
      "put": {
        "description": "Ingest data into a campaign",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Unique identifier of the campaign",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Campaign data to ingest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Campaign data ingested successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/start": {
      "post": {
        "description": "Start campaign",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Unique identifier of the campaign",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/stop": {
      "post": {
        "description": "Stop campaign",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Unique identifier of the campaign",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign stopped successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/schedule": {
      "post": {
        "description": "Set campaign schedule",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Unique identifier of the campaign",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Campaign schedule details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignSchedule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Campaign schedule set successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/insights": {
      "get": {
        "description": "Get campaign insights",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "Unique identifier of the campaign",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign insights retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignInsights"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cache/generate/tts": {
      "post": {
        "description": "Generate text-to-speech audio",
        "requestBody": {
          "description": "TTS generation parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TTSRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TTS generation task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cache/generate/tts/upload": {
      "post": {
        "description": "Bulk generate text-to-speech audio",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "File containing texts for TTS generation"
                  },
                  "language": {
                    "type": "string",
                    "description": "Language for TTS generation"
                  },
                  "model": {
                    "type": "string",
                    "description": "TTS model to use"
                  }
                },
                "required": ["file", "language", "model"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bulk TTS generation tasks created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkTaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cache/tts/{taskId}": {
      "get": {
        "description": "Get generated text-to-speech audio",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Unique identifier of the TTS generation task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TTS audio URL retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AudioResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Task not found or not completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cache/generate/voice-clone": {
      "post": {
        "description": "Generate voice clone",
        "requestBody": {
          "description": "Voice clone generation parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceCloneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Voice clone generation task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cache/voice-clone/{taskId}": {
      "get": {
        "description": "Get generated voice clone",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Unique identifier of the voice clone generation task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voice clone audio URL retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AudioResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Task not found or not completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cache/generate/lip-sync": {
      "post": {
        "description": "Generate lip sync",
        "requestBody": {
          "description": "Lip sync generation parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LipSyncRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Lip sync generation task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cache/lip-sync/{taskId}": {
      "get": {
        "description": "Get generated lip sync",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Unique identifier of the lip sync generation task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lip sync video URL retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Task not found or not completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cache/generate/face-swap": {
      "post": {
        "description": "Generate face swap",
        "requestBody": {
          "description": "Face swap generation parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSwapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Face swap generation task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cache/face-swap/{taskId}": {
      "get": {
        "description": "Get generated face swap",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Unique identifier of the face swap generation task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Face swap video URL retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Task not found or not completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/vton/request": {
      "servers": [                     
        { "url": "https://api.whilter.ai" }
      ],
      "post": {
        "description": "Create Virtual Tryon Request",
        "requestBody": {
          "description": "Virtual Tryon request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VirtualTryonRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Virtual Tryon request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/vton/status/{requestId}": {
      "servers": [                     
        { "url": "https://api.whilter.ai" }
      ],
      "get": {
        "description": "Get Virtual Tryon Status",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Unique identifier of the Virtual Tryon request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual Tryon status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualTryonResponse" 
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Vendor": {
        "type": "object",
        "properties": {
          "vendor_id": {
            "type": "string",
            "description": "Unique identifier of the vendor"
          },
          "name": {
            "type": "string",
            "description": "Name of the vendor"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email of the vendor"
          },
          "plan": {
            "type": "string",
            "enum": ["Free", "Standard", "Enterprise"],
            "description": "Subscription plan of the vendor"
          },
          "credits": {
            "type": "integer",
            "description": "Available credits for the vendor"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended"],
            "description": "Status of the vendor account"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the vendor was created"
          }
        },
        "required": ["vendor_id", "name", "email", "plan", "credits", "status"]
      },
      "VendorUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the vendor"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Updated email of the vendor"
          }
        },
        "required": ["name", "email"]
      },
      "VendorPlanUpdate": {
        "type": "object",
        "properties": {
          "plan": {
            "type": "string",
            "enum": ["Free", "Standard", "Enterprise"],
            "description": "Updated subscription plan of the vendor"
          },
          "credits": {
            "type": "integer",
            "description": "Updated available credits for the vendor"
          }
        },
        "required": ["plan", "credits"]
      },
      "NewVendor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new vendor"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email of the new vendor"
          },
          "plan": {
            "type": "string",
            "enum": ["Free", "Standard", "Enterprise"],
            "description": "Subscription plan for the new vendor"
          },
          "credits": {
            "type": "integer",
            "description": "Initial credits for the new vendor"
          }
        },
        "required": ["name", "email", "plan", "credits"]
      },
      "ClientCredentials": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Client ID provided during vendor onboarding"
          },
          "client_secret": {
            "type": "string",
            "description": "Secret key provided during vendor onboarding"
          }
        },
        "required": ["client_id", "client_secret"]
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Access token for API authentication"
          },
          "token_type": {
            "type": "string",
            "description": "Type of token (e.g., Bearer)"
          },
          "expires_in": {
            "type": "integer",
            "description": "Token expiration time in seconds"
          },
          "refresh_token": {
            "type": "string",
            "description": "Token used to refresh the access token"
          }
        },
        "required": ["access_token", "token_type", "expires_in"]
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "Token used to obtain a new access token"
          }
        },
        "required": ["refresh_token"]
      },
      "Brand": {
        "type": "object",
        "properties": {
          "brand_id": {
            "type": "string",
            "description": "Unique identifier of the brand"
          },
          "name": {
            "type": "string",
            "description": "Name of the brand"
          },
          "vendor_id": {
            "type": "string",
            "description": "ID of the vendor managing the brand"
          }
        },
        "required": ["brand_id", "name", "vendor_id"]
      },
      "NewBrand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new brand"
          },
          "vendor_id": {
            "type": "string",
            "description": "ID of the vendor creating the brand"
          }
        },
        "required": ["name", "vendor_id"]
      },
      "BrandUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the brand"
          }
        },
        "required": ["name"]
      },
      "Campaign": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "string",
            "description": "Unique identifier of the campaign"
          },
          "brand_id": {
            "type": "string",
            "description": "ID of the brand associated with the campaign"
          },
          "name": {
            "type": "string",
            "description": "Name of the campaign"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "running", "stopped", "completed"],
            "description": "Current status of the campaign"
          }
        },
        "required": ["campaign_id", "brand_id", "name", "status"]
      },
      "NewCampaign": {
        "type": "object",
        "properties": {
          "brand_id": {
            "type": "string",
            "description": "ID of the brand for the campaign"
          },
          "name": {
            "type": "string",
            "description": "Name of the new campaign"
          }
        },
        "required": ["brand_id", "name"]
      },
      "CampaignData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Campaign data to ingest (structure depends on campaign type)"
          }
        },
        "required": ["data"]
      },
      "IngestResponse": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "string",
            "description": "ID of the campaign"
          },
          "status": {
            "type": "string",
            "description": "Status of the ingestion process"
          }
        },
        "required": ["campaign_id", "status"]
      },
      "CampaignSchedule": {
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "Scheduled start time for the campaign"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "Scheduled end time for the campaign"
          }
        },
        "required": ["start_time", "end_time"]
      },
      "OperationResponse": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "string",
            "description": "ID of the campaign"
          },
          "status": {
            "type": "string",
            "description": "Result of the operation (e.g., started, stopped)"
          }
        },
        "required": ["campaign_id", "status"]
      },
      "CampaignInsights": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "string",
            "description": "ID of the campaign"
          },
          "performance": {
            "type": "object",
            "description": "Performance metrics of the campaign (structure depends on campaign type)"
          }
        },
        "required": ["campaign_id", "performance"]
      },
      "TTSRequest": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Transliterated text for TTS generation"
          },
          "language": {
            "type": "string",
            "description": "Language for TTS generation"
          },
          "model": {
            "type": "string",
            "description": "TTS model to use"
          }
        },
        "required": ["text", "language", "model"]
      },
      "TaskResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "description": "Unique identifier of the generation task"
          }
        },
        "required": ["task_id"]
      },
      "VirtualRequestResponse": {
        "type": "object",
        "properties": {
          "request-id": {
            "type": "string",
            "description": "Unique identifier of the generation task"
          }
        },
        "required": ["request-id"]
      },
      "BulkTaskResponse": {
        "type": "object",
        "properties": {
          "task_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of task IDs for bulk TTS generation"
          }
        },
        "required": ["task_ids"]
      },
      "AudioResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "S3 URL of the generated audio"
          }
        },
        "required": ["url"]
      },
      "VoiceCloneRequest": {
        "type": "object",
        "properties": {
          "source_audio_url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the source audio"
          },
          "adjacent_audio_url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the adjacent audio"
          },
          "model": {
            "type": "string",
            "description": "Voice clone model to use"
          },
          "trim_silence": {
            "type": "integer",
            "description": "Trim silence parameter"
          },
          "update_audio_length": {
            "type": "integer",
            "description": "Update audio length parameter"
          },
          "update_loudness": {
            "type": "boolean",
            "description": "Whether to update loudness"
          },
          "smooth_transition": {
            "type": "boolean",
            "description": "Whether to smooth transitions"
          },
          "tone_matching": {
            "type": "integer",
            "description": "Tone matching parameter"
          },
          "pitch_matching": {
            "type": "integer",
            "description": "Pitch matching parameter"
          },
          "concat_adjacent_and_final_output": {
            "type": "boolean",
            "description": "Whether to concatenate adjacent and final output"
          }
        },
        "required": ["source_audio_url", "model"]
      },
      "LipSyncRequest": {
        "type": "object",
        "properties": {
          "base_video_url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the base video"
          },
          "video_face_mask_url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the video face mask"
          },
          "model": {
            "type": "string",
            "description": "Lip sync model to use"
          },
          "audio_url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the audio (TTS or voice clone)"
          },
          "filter_complex": {
            "type": "string",
            "description": "Filter complex settings"
          }
        },
        "required": ["base_video_url", "model", "audio_url"]
      },
      "VirtualTryonRequest": {
        "type": "object",
        "properties": {
          "user-id": {
            "type": "string",
            "description": "User phone number or ID"
          },
          "client-id": {
            "type": "string",
            "description": "Client ID provided during vendor onboarding"
          },
          "usecase-id": {
            "type": "string",
            "description": "Usecase ID provided during vendor onboarding"
          },
          "model-image": {
            "type": "string",
            "format": "uri",
            "description": "URL of the model image"
          },
          "garment-image": {
            "type": "string",
            "format": "uri",
            "description": "URL of the garment image"
          },
          "category": {
            "type": "string",
            "description": "Category of garments",
            "enum": ["auto", "tops", "bottoms", "one-pieces"],
            "default": "auto"
          },
          "mode": {
            "type": "string",
            "description": "Speed vs quality preset",
            "enum": ["balanced", "performance", "quality"],
            "default": "balanced"
          },
          "moderation_level": {
            "type": "string",
            "description": "Content safety filter",
            "enum": ["conservative", "permissive", "none"],
            "default": "permissive"
          },
          "segmentation_free": {
            "type": "boolean",
            "description": "Skip clothing removal"
          },
          "output_format": {
            "type": "string",
            "description": "Image encoding for output",
            "enum": ["png", "jpeg"],
            "default": "png"
          }
        },
        "required": ["user-id", "client-id", "usecase-id", "model-image", "garment-image", "category"]
      },
      "VirtualTryonResponse": {
        "type": "object",
        "properties": {
          "request-id": {
            "type": "string",
            "description": "Unique identifier of the Virtual Tryon request"
          },
          "status": {
            "type": "string",
            "description": "Status of the Virtual Tryon request",
            "enum": ["SUCCESS", "FAILURE"]
          },
          "generated-output": {
            "type": "string",
            "format": "uri",
            "description": "S3 URL of the generated output image"
          }
        },
        "required": ["url"]
      },
      "VideoResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "S3 URL of the generated video"
          }
        },
        "required": ["url"]
      },
      "FaceSwapRequest": {
        "type": "object",
        "properties": {
          "base_video_url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the base video"
          },
          "image_url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the image for face swap"
          }
        },
        "required": ["base_video_url", "image_url"]
      },
      "Error": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "description": "HTTP status code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        },  
        "required": ["status_code", "message"]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Bearer token authentication using OAuth2 access token"
      }
    }
  }
}
